name: 🧪 Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Node 22 (LTS até 2027) + Node 24 (LTS até 2028) + Node 25 (Current)
        node-version: [22, 24, 25]
      fail-fast: false

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚀 Start MinIO & Create Bucket
        run: |
          echo "Starting MinIO..."
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin123 \
            minio/minio:latest \
            server /data --console-address :9001

          echo "Waiting for MinIO to be ready..."
          timeout 60s bash -c 'until curl -f http://localhost:9000/minio/health/live 2>/dev/null; do sleep 2; done'
          echo "✅ MinIO ready!"

          echo "Creating s3db bucket..."
          docker run --rm --network="host" \
            -e AWS_ACCESS_KEY_ID=minioadmin \
            -e AWS_SECRET_ACCESS_KEY=minioadmin123 \
            amazon/aws-cli \
            --endpoint-url http://localhost:9000 \
            s3 mb s3://s3db || echo "Bucket already exists"
          echo "✅ Bucket ready!"

      - name: 🏗️ Build
        run: pnpm run build

      - name: 🧪 Run Tests
        run: pnpm test
        env:
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin123
          AWS_ENDPOINT: http://localhost:9000
          AWS_REGION: us-east-1
          AWS_BUCKET: s3db
          AWS_FORCE_PATH_STYLE: true
          BUCKET_CONNECTION_STRING: s3://minioadmin:minioadmin123@s3db?endpoint=http://localhost:9000&region=us-east-1&forcePathStyle=true

      - name: 🔍 TypeScript Check
        run: pnpm run test:ts

      - name: 📊 Upload Coverage (Node 20 only)
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
        continue-on-error: true

  # Summary with coverage info
  summary:
    name: 📊 Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build
        run: pnpm run build

      - name: 🧪 Run Tests with Coverage
        run: pnpm run test:coverage
        continue-on-error: true

      - name: 📊 Generate Summary
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ **All tests passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests failed**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage/coverage-summary.json ]; then
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY

  # Trigger binaries workflow if tests passed and on main branch
  trigger-binaries:
    name: 🚀 Trigger Binary Release
    needs: [test, summary]
    if: success() && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/release-binaries.yml
    secrets: inherit
