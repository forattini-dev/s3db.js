name: CI (Full)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test-matrix:
    name: Tests (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        node: [22, 24, 25]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin123 \
            minio/minio:latest \
            server /data --quiet

          timeout 30s bash -c 'until curl -sf http://localhost:9000/minio/health/live; do sleep 1; done'

          docker run --rm --network="host" \
            -e AWS_ACCESS_KEY_ID=minioadmin \
            -e AWS_SECRET_ACCESS_KEY=minioadmin123 \
            amazon/aws-cli \
            --endpoint-url http://localhost:9000 \
            s3 mb s3://s3db 2>/dev/null || true

      - name: Build
        run: pnpm run build

      - name: Run Tests
        run: pnpm test
        env:
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin123
          AWS_ENDPOINT: http://localhost:9000
          AWS_REGION: us-east-1
          AWS_BUCKET: s3db
          AWS_FORCE_PATH_STYLE: true
          BUCKET_CONNECTION_STRING: s3://minioadmin:minioadmin123@s3db?endpoint=http://localhost:9000&region=us-east-1&forcePathStyle=true

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin123 \
            minio/minio:latest \
            server /data --quiet

          timeout 30s bash -c 'until curl -sf http://localhost:9000/minio/health/live; do sleep 1; done'

          docker run --rm --network="host" \
            -e AWS_ACCESS_KEY_ID=minioadmin \
            -e AWS_SECRET_ACCESS_KEY=minioadmin123 \
            amazon/aws-cli \
            --endpoint-url http://localhost:9000 \
            s3 mb s3://s3db 2>/dev/null || true

      - name: Build
        run: pnpm run build

      - name: Run Tests with Coverage
        run: pnpm run test:coverage
        env:
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin123
          AWS_ENDPOINT: http://localhost:9000
          AWS_REGION: us-east-1
          AWS_BUCKET: s3db
          AWS_FORCE_PATH_STYLE: true
          BUCKET_CONNECTION_STRING: s3://minioadmin:minioadmin123@s3db?endpoint=http://localhost:9000&region=us-east-1&forcePathStyle=true

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Coverage Summary
        if: always()
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage/coverage-summary.json ]; then
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)

            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, coverage]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## CI (Full) Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs Status" >> $GITHUB_STEP_SUMMARY
          echo "- Test Matrix: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Check Status
        if: needs.test-matrix.result != 'success'
        run: |
          echo "CI Failed"
          exit 1
