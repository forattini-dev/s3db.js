name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., v11.4.0)'
        required: true
        type: string

jobs:
  build-binaries:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
          - os: macos-13
            platform: macos-x64
          - os: macos-14
            platform: macos-arm64
          - os: windows-latest
            platform: win-x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Package
        run: pnpm run build

      - name: Build Binaries
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            bash ./scripts/build-binaries.sh
          else
            ./scripts/build-binaries.sh
          fi
        shell: bash

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: bin/standalone/
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download All Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: all-binaries/
          merge-multiple: true

      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v$(date +%Y.%m.%d)"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: List Binaries
        run: |
          echo "Built binaries:"
          find all-binaries/ -type f -exec ls -lh {} \;

      - name: Generate Release Notes
        run: |
          cat > release_notes.md << 'EOF'
          ## s3db.js ${{ steps.version.outputs.VERSION }}

          ### Installation

          **NPM:**
          ```bash
          npm install s3db.js@${{ steps.version.outputs.VERSION_NUMBER }}
          ```

          **Standalone Binaries:**
          Download for your platform below (no Node.js required).

          ### Binaries

          - `s3db-linux-x64` - Linux 64-bit
          - `s3db-macos-x64` - macOS Intel
          - `s3db-macos-arm64` - macOS Apple Silicon (M1/M2/M3)
          - `s3db-win-x64.exe` - Windows 64-bit
          - `s3db-mcp-*` - MCP Server variants

          ### Usage

          ```bash
          # Linux/macOS
          chmod +x s3db-linux-x64
          ./s3db-linux-x64 --help

          # Windows
          s3db-win-x64.exe --help
          ```

          ### Documentation

          - [Main Docs](https://github.com/forattini-dev/s3db.js)
          - [API Plugin](https://github.com/forattini-dev/s3db.js/blob/main/docs/plugins/api.md)
          - [Identity Plugin](https://github.com/forattini-dev/s3db.js/blob/main/docs/plugins/identity.md)
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "s3db.js ${{ steps.version.outputs.VERSION }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: all-binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Files:** $(find all-binaries/ -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "**Total Size:** $(du -sh all-binaries/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Binaries" >> $GITHUB_STEP_SUMMARY
          find all-binaries/ -type f -exec basename {} \; | sort | while read file; do
            SIZE=$(du -h "all-binaries/$file" | cut -f1)
            echo "- \`$file\` ($SIZE)" >> $GITHUB_STEP_SUMMARY
          done

  publish-npm:
    name: Publish to NPM
    needs: build-binaries
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Publish to NPM
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true
