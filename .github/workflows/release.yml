name: 🚀 Release & Build Binaries

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        default: 'v9.0.2'

jobs:
  # Job 1: Test and Build
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Package
        run: pnpm run build

      - name: 🧪 Run Tests
        run: pnpm run test:quick
        timeout-minutes: 5

      - name: 🔍 TypeScript Check
        run: pnpm run test:ts

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Job 2: Build Binaries (Matrix for multiple platforms)
  build-binaries:
    name: 🔨 Build Binaries
    needs: test-and-build
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
          - os: macos-latest
            platform: macos-x64
          - os: macos-14 # Apple Silicon
            platform: macos-arm64
          - os: windows-latest
            platform: win-x64

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🔨 Build Binaries
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            bash build-binaries.sh
          else
            ./build-binaries.sh
          fi
        shell: bash

      - name: 📤 Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: releases/
          retention-days: 1

  # Job 3: Create Release
  create-release:
    name: 🎉 Create Release
    needs: [test-and-build, build-binaries]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download All Binary Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: all-binaries/
          merge-multiple: true

      - name: 🏷️ Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: 📋 List Binary Files
        run: |
          echo "📦 Built binaries:"
          find all-binaries/ -type f -exec ls -lh {} \;

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 S3DB.js ${{ steps.version.outputs.VERSION }}
          
          ### 📦 Installation
          
          **NPM Package (Lightweight ~200KB):**
          ```bash
          npm install s3db.js@${{ steps.version.outputs.VERSION_NUMBER }}
          ```
          
          **Standalone Binaries (No Node.js required):**
          Download the appropriate binary for your platform below.
          
          ### 🎯 What's Included
          
          - ✅ **s3db-linux-x64** - Linux 64-bit standalone executable
          - ✅ **s3db-macos-x64** - macOS Intel standalone executable  
          - ✅ **s3db-macos-arm64** - macOS Apple Silicon standalone executable
          - ✅ **s3db-win-x64.exe** - Windows 64-bit standalone executable
          - ✅ **s3db-mcp-linux-x64** - MCP Server for Linux
          - ✅ **s3db-mcp-macos-x64** - MCP Server for macOS Intel
          - ✅ **s3db-mcp-macos-arm64** - MCP Server for macOS Apple Silicon
          - ✅ **s3db-mcp-win-x64.exe** - MCP Server for Windows
          
          ### 🔧 Usage
          
          **CLI Usage:**
          ```bash
          # Make executable (Linux/macOS)
          chmod +x s3db-linux-x64
          
          # Run commands
          ./s3db-linux-x64 --help
          ./s3db-linux-x64 connect s3://key:secret@bucket
          ```
          
          **MCP Server Usage:**
          ```bash
          # Start MCP server
          ./s3db-mcp-linux-x64 --transport=sse --port=8000
          ```
          
          ### 📊 Features in This Release
          
          - 🚀 **Advanced Metadata Encoding** - 31% better compression than base64
          - 🔧 **Dictionary Compression** - Status values, booleans, HTTP methods → 2 bytes
          - ⏱️ **ISO Timestamp Optimization** - 62.5% space savings
          - 🆔 **UUID Compression** - 30.6% smaller
          - 🔍 **Smart Encoding Selection** - Automatic best method choice
          - 📈 **Performance Optimized** - Memory cache for UTF-8 calculations
          - 🛡️ **Production Ready** - Professional package structure
          
          ### 🔍 Checksums
          
          Run `sha256sum <binary>` to verify integrity:
          
          ```
          # Checksums will be auto-generated during release
          ```
          
          ### 📚 Documentation
          
          - [📖 Main Documentation](https://github.com/forattini-dev/s3db.js)
          - [🔧 CLI Usage](https://github.com/forattini-dev/s3db.js#cli-usage)  
          - [🔗 MCP Integration](https://github.com/forattini-dev/s3db.js#mcp-server)
          - [🚀 Release Process](https://github.com/forattini-dev/s3db.js/blob/main/RELEASE_PROCESS.md)
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "S3DB.js ${{ steps.version.outputs.VERSION }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            all-binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Binaries:** $(find all-binaries/ -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          echo "**Total Size:** $(du -sh all-binaries/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Assets:" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find all-binaries/ -type f -exec basename {} \; | sort | while read file; do
            size=$(ls -lh "all-binaries/$file" | awk '{print $5}')
            echo "| \`$file\` | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 4: Publish to NPM (Optional)
  publish-npm:
    name: 📦 Publish to NPM  
    needs: [test-and-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only on version tags
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🔍 Verify Package Contents
        run: |
          echo "📦 Package contents:"
          npm pack --dry-run 2>/dev/null | grep -E "^npm notice|^package size" || echo "Package verification complete"

      - name: 📤 Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        # Note: Add NPM_TOKEN to repository secrets