name: 📦 Build & Release Binaries

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v11.3.2)'
        required: false
        default: ''

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
          - os: macos-13
            platform: macos-x64
          - os: macos-14
            platform: macos-arm64
          - os: windows-latest
            platform: win-x64

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Package
        run: pnpm run build

      - name: 🔨 Build Binaries
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            bash ./scripts/scripts/build-binaries.sh
          else
            ./scripts/scripts/build-binaries.sh
          fi
        shell: bash

      - name: 📤 Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: bin/standalone/
          retention-days: 7

  release:
    name: 🚀 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.version != '' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📥 Download All Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: all-binaries/
          merge-multiple: true

      - name: 🏷️ Get Version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: 📋 List Binaries
        run: |
          echo "📦 Built binaries:"
          find all-binaries/ -type f -exec ls -lh {} \;

      - name: 📝 Generate Release Notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 s3db.js ${{ steps.version.outputs.VERSION }}

          ### 📦 Installation

          **NPM:**
          ```bash
          npm install s3db.js@${{ steps.version.outputs.VERSION_NUMBER }}
          ```

          **Standalone Binaries:**
          Download for your platform below (no Node.js required).

          ### 🎯 Binaries

          - ✅ `s3db-linux-x64` - Linux 64-bit
          - ✅ `s3db-macos-x64` - macOS Intel
          - ✅ `s3db-macos-arm64` - macOS Apple Silicon
          - ✅ `s3db-win-x64.exe` - Windows 64-bit
          - ✅ `s3db-mcp-*` - MCP Server variants

          ### 🔧 Usage

          ```bash
          # Linux/macOS
          chmod +x s3db-linux-x64
          ./s3db-linux-x64 --help

          # Windows
          s3db-win-x64.exe --help
          ```

          ### 📚 Documentation

          - [Main Docs](https://github.com/forattini-dev/s3db.js)
          - [CLI Usage](https://github.com/forattini-dev/s3db.js#cli)
          - [MCP Server](https://github.com/forattini-dev/s3db.js#mcp)
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "s3db.js ${{ steps.version.outputs.VERSION }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: all-binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Summary
        run: |
          echo "## 🎉 Release Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: \`${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Files**: $(find all-binaries/ -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "**Size**: $(du -sh all-binaries/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Binaries" >> $GITHUB_STEP_SUMMARY
          find all-binaries/ -type f -exec basename {} \; | sort | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done

  # TODO: Upload to S3 (adicione suas credenciais AWS nos secrets)
  # upload-s3:
  #   name: 📤 Upload to S3
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 📥 Download Binaries
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: binaries-*
  #         path: binaries/
  #
  #     - name: 📤 Upload to S3
  #       run: |
  #         aws s3 sync binaries/ s3://your-bucket/s3db-binaries/${{ steps.version.outputs.VERSION }}/
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: us-east-1
