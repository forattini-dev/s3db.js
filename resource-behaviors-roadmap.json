{
  "project": "s3db.js",
  "feature": "resource.behavior",
  "version": "3.3.2+",
  "status": "implemented",
  "defaultBehavior": "user-management",
  "description": "Feature flags para lidar com limite de 2KB de metadados do S3",
  "architecturePattern": "Strategy Pattern",
  "behaviors": [
    {
      "name": "user-management",
      "isDefault": true,
      "type": "event-warn",
      "description": "Responsabilidade do usuário gerenciar limites de metadados",
      "behavior": "Emite evento 'exceedsLimit' quando dados excedem 2KB mas permite operação",
      "event": "exceedsLimit",
      "utils": ["calculator.js"],
      "files": ["src/behaviors/user-management.js"],
      "example": "resource.on('exceedsLimit', ctx => console.warn('Size:', ctx.totalSize))"
    },
    {
      "name": "enforce-limits", 
      "type": "error",
      "description": "Validação rígida que impede operações com dados > 2KB",
      "behavior": "Lança erro quando metadados excedem limite de 2KB",
      "error": "S3 metadata size exceeds 2KB limit. Current size: X bytes, limit: 2048 bytes",
      "utils": ["calculator.js"],
      "files": ["src/behaviors/enforce-limits.js"],
      "example": "await resource.insert(largeData); // throws Error"
    },
    {
      "name": "data-truncate",
      "type": "truncate", 
      "description": "Truncamento inteligente para caber dados em 2KB",
      "behavior": "Ordena atributos por tamanho e corta dados para caber em 2KB",
      "algorithm": "1. Ordena atributos por tamanho crescente, 2. Acumula até 2KB, 3. Trunca último atributo com '...', 4. Descarta restantes",
      "suffix": "...",
      "utils": ["calculator.js"],
      "files": ["src/behaviors/data-truncate.js"],
      "example": "{ bio: 'Long text...', description: 'omitted' }"
    },
    {
      "name": "body-overflow",
      "type": "split",
      "description": "Usa body do S3 para armazenar dados excedentes",
      "behavior": "Separa dados em metadados (2KB) + body (excedente) com merge automático na leitura",
      "flags": ["$overflow"],
      "mergeStrategy": "Se $overflow=true, lê body + metadados e faz merge",
      "storage": {
        "metadata": "Até 2KB com flag $overflow=true",
        "body": "JSON.stringify dos atributos excedentes"
      },
      "utils": ["calculator.js"],
      "files": ["src/behaviors/body-overflow.js"],
      "example": "Metadados: {name, $overflow: true}, Body: {bio, description}"
    }
  ],
  "tasks": [
    {
      "id": "strategy-pattern",
      "description": "Implementar Strategy Pattern para behaviors",
      "status": "completed",
      "files": ["src/behaviors/index.js"],
      "details": "Interface comum: handleInsert, handleUpdate, handleUpsert, handleGet"
    },
    {
      "id": "persist-behavior",
      "description": "Persistir campo 'behavior' no s3db.json ao criar Resource",
      "status": "completed", 
      "files": ["src/database.class.js"],
      "example": "new Resource({ name: 'events', behavior: 'data-truncate' })",
      "persistence": "Salvo em versions[version].behavior no s3db.json"
    },
    {
      "id": "resource-integration",
      "description": "Integrar behaviors nos métodos Resource",
      "status": "completed",
      "files": ["src/resource.class.js"],
      "methods": ["insert", "update", "upsert", "get"],
      "details": "Aplicar behavior strategy antes de operações S3"
    },
    {
      "id": "calculator-integration", 
      "description": "Usar calculator.js para medir tamanho dos metadados",
      "status": "completed",
      "files": ["src/concerns/calculator.js"],
      "functions": ["calculateTotalSize", "calculateAttributeSizes", "calculateUTF8Bytes"]
    },
    {
      "id": "examples-documentation",
      "description": "Criar exemplos e documentação completa",
      "status": "completed",
      "files": [
        "examples/12-resource-behaviors.js",
        "RESOURCE_BEHAVIORS_ROADMAP.md",
        "resource-behaviors-roadmap.json"
      ]
    }
  ],
  "api": {
    "createResource": {
      "signature": "db.createResource({ name, attributes, options, behavior })",
      "parameters": {
        "behavior": {
          "type": "string", 
          "default": "user-management",
          "options": ["user-management", "enforce-limits", "data-truncate", "body-overflow"]
        }
      }
    },
    "events": {
      "exceedsLimit": {
        "behavior": "user-management",
        "context": {
          "operation": "string (insert|update|upsert)",
          "id": "string (para update/upsert)",
          "totalSize": "number (bytes)",
          "limit": "number (2048)",
          "excess": "number (totalSize - limit)",
          "data": "object (dados originais)"
        }
      }
    }
  },
  "fileStructure": {
    "src/behaviors/": {
      "index.js": "Exporta todos behaviors e getBehavior()",
      "user-management.js": "Behavior padrão com eventos de warning",
      "enforce-limits.js": "Behavior de validação rígida",
      "data-truncate.js": "Behavior de truncamento inteligente", 
      "body-overflow.js": "Behavior de overflow para body"
    },
    "examples/": {
      "12-resource-behaviors.js": "Demonstração completa dos 4 behaviors"
    },
    "docs/": {
      "RESOURCE_BEHAVIORS_ROADMAP.md": "Documentação completa da feature"
    }
  },
  "compatibility": {
    "backward": "Recursos existentes usam 'user-management' por padrão",
    "versioning": "Mudanças em behavior criam nova versão do resource",
    "migration": "Suporte a migração de behaviors existentes"
  },
  "testing": {
    "unitTests": "Testes para cada behavior isoladamente",
    "integrationTests": "Testes de integração com Resource/Database",
    "exampleTest": "node examples/12-resource-behaviors.js"
  },
  "performance": {
    "considerations": [
      "body-overflow adiciona latência na leitura",
      "data-truncate é mais rápido que body-overflow",
      "user-management tem menor overhead",
      "enforce-limits falha rápido em validação"
    ]
  },
  "useCases": {
    "user-management": "Sistemas onde dev controla tamanho de dados",
    "enforce-limits": "APIs com validação rigorosa de tamanho",
    "data-truncate": "CMS onde truncamento é aceitável",
    "body-overflow": "Armazenamento completo de documentos grandes"
  },
  "implementation": {
    "startDate": "2024-01-01",
    "completionDate": "2024-01-01",
    "effort": "1 day",
    "complexity": "medium",
    "linesOfCode": "~400",
    "filesChanged": 6,
    "filesCreated": 8
  }
}