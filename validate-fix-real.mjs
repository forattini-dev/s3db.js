#!/usr/bin/env node

/**
 * VALIDA√á√ÉO REAL DO FIX - EventualConsistency
 *
 * Este script valida se o fix est√° REALMENTE funcionando usando:
 * - MinIO real (n√£o LocalStack)
 * - C√≥digo real do s3db.js local
 * - Cen√°rio exato do bug do mrt-shortner
 */

import S3DB from './dist/s3db.es.js';
import { EventualConsistencyPlugin } from './dist/s3db.es.js';

console.log('\nüî¨ VALIDA√á√ÉO REAL DO FIX - EventualConsistency\n');
console.log('='.repeat(70));

// Configura√ß√£o
const config = {
  connectionString: process.env.S3DB_CONNECTION || 'http://minioadmin:minioadmin123@localhost:9100/s3db',
  verbose: true
};

console.log('\nüìã Configura√ß√£o:');
console.log(`   Connection: ${config.connectionString}`);
console.log(`   Verbose: ${config.verbose}`);

const database = new S3DB({ connectionString: config.connectionString });

try {
  console.log('\n1Ô∏è‚É£  Conectando ao MinIO...');
  await database.connect();
  console.log('   ‚úÖ Conectado');

  console.log('\n2Ô∏è‚É£  Criando resource de teste...');
  const resourceName = `test_validation_${Date.now()}`;
  const urls = await database.createResource({
    name: resourceName,
    attributes: {
      id: 'string|required',
      link: 'string|optional',
      clicks: 'number|default:0',
      views: 'number|default:0'
    }
  });
  console.log(`   ‚úÖ Resource criado: ${resourceName}`);

  console.log('\n3Ô∏è‚É£  Configurando EventualConsistency...');
  const plugin = new EventualConsistencyPlugin({
    resource: resourceName,
    field: 'clicks',
    mode: 'sync',
    autoConsolidate: false,
    verbose: config.verbose
  });
  await database.usePlugin(plugin);
  console.log('   ‚úÖ Plugin configurado');

  console.log('\n' + '='.repeat(70));
  console.log('üî¥ TESTE DO BUG: Adicionar clicks ANTES do URL existir');
  console.log('='.repeat(70));

  const testId = `url-${Date.now()}`;

  console.log('\n4Ô∏è‚É£  Adicionando clicks a URL INEXISTENTE...');
  console.log(`   URL ID: ${testId}`);
  console.log('   ‚ö†Ô∏è  IMPORTANTE: URL N√ÉO FOI CRIADO ainda!\n');

  console.log('   [1/3] Adicionando click 1...');
  await urls.add(testId, 'clicks', 1);
  console.log('   ‚úÖ Click 1 adicionado');

  console.log('   [2/3] Adicionando click 2...');
  await urls.add(testId, 'clicks', 1);
  console.log('   ‚úÖ Click 2 adicionado');

  console.log('   [3/3] Adicionando click 3...');
  await urls.add(testId, 'clicks', 1);
  console.log('   ‚úÖ Click 3 adicionado');

  console.log('\n5Ô∏è‚É£  Lendo do banco de dados...\n');

  const url = await urls.get(testId);

  console.log('='.repeat(70));
  console.log('üìä RESULTADO DA VALIDA√á√ÉO');
  console.log('='.repeat(70));

  if (!url) {
    console.log('\n‚ùå FALHA: URL n√£o existe!');
    console.log('\nüî¥ FIX N√ÉO EST√Å FUNCIONANDO!');
    console.log('\nO que aconteceu:');
    console.log('  - Clicks foram adicionados a URL inexistente');
    console.log('  - Consolida√ß√£o deveria ter criado o URL');
    console.log('  - Mas URL.get() retornou null');
    console.log('\nPoss√≠veis causas:');
    console.log('  1. Voc√™ est√° usando s3db.js do npm (n√£o tem o fix)');
    console.log('  2. O fix n√£o foi aplicado corretamente');
    console.log('  3. H√° outro problema n√£o identificado');
    console.log('\nSolu√ß√£o:');
    console.log('  Use: pnpm link --global s3db.js');
    console.log('='.repeat(70));
    process.exit(1);
  }

  console.log(`\n‚úÖ URL existe! ID: ${url.id}`);
  console.log(`üìä Clicks: ${url.clicks}`);
  console.log(`üìä Views: ${url.views || 0}`);

  console.log('\nüîç An√°lise:');

  if (url.clicks === 3) {
    console.log('  ‚úÖ Clicks = 3 (CORRETO!)');
    console.log('  ‚úÖ Consolida√ß√£o funcionou');
    console.log('  ‚úÖ Upsert (insert) funcionou');
    console.log('  ‚úÖ Valores foram persistidos');

    console.log('\n' + '='.repeat(70));
    console.log('üéâ SUCESSO! FIX EST√Å FUNCIONANDO!');
    console.log('='.repeat(70));
    console.log('\nDetalhes:');
    console.log('  - URL foi criado automaticamente pela consolida√ß√£o (upsert)');
    console.log('  - 3 clicks foram contabilizados corretamente');
    console.log('  - Valores foram persistidos no S3/MinIO');
    console.log('\n‚úÖ EventualConsistency est√° funcionando corretamente!');
    console.log('‚úÖ Voc√™ pode usar no mrt-shortner com seguran√ßa!');
    console.log('='.repeat(70));
    process.exit(0);
  } else if (url.clicks === 0) {
    console.log(`  ‚ùå Clicks = 0 (ERRADO! Deveria ser 3)`);
    console.log('  ‚ùå Consolida√ß√£o n√£o persistiu os valores');
    console.log('  ‚ùå Bug ainda presente');

    console.log('\n' + '='.repeat(70));
    console.log('üî¥ FALHA! BUG AINDA PRESENTE!');
    console.log('='.repeat(70));
    console.log('\nO que aconteceu:');
    console.log('  - URL foi criado (por insert manual ou outro meio)');
    console.log('  - MAS clicks n√£o foram contabilizados');
    console.log('  - Consolida√ß√£o calculou mas n√£o persistiu');
    console.log('\nPoss√≠vel causa:');
    console.log('  - Voc√™ est√° usando s3db.js do npm (vers√£o 10.0.9 sem fix)');
    console.log('\nSolu√ß√£o:');
    console.log('  1. cd ~/work/martech/s3db.js');
    console.log('  2. pnpm link --global');
    console.log('  3. cd ~/work/martech/mrt-shortner');
    console.log('  4. pnpm link --global s3db.js');
    console.log('  5. Rodar este script novamente');
    console.log('='.repeat(70));
    process.exit(1);
  } else {
    console.log(`  ‚ö†Ô∏è  Clicks = ${url.clicks} (INESPERADO! Deveria ser 3)`);
    console.log('  ‚ö†Ô∏è  Valor parcial ou incorreto');

    console.log('\n' + '='.repeat(70));
    console.log('‚ö†Ô∏è  RESULTADO INESPERADO');
    console.log('='.repeat(70));
    console.log(`\nValor esperado: 3`);
    console.log(`Valor obtido: ${url.clicks}`);
    console.log('\nInvestigue:');
    console.log('  - Verifique logs de consolida√ß√£o');
    console.log('  - Verifique transa√ß√µes pendentes');
    console.log('  - Pode haver race condition ou outro problema');
    console.log('='.repeat(70));
    process.exit(1);
  }

} catch (error) {
  console.log('\n' + '='.repeat(70));
  console.log('‚ùå ERRO DURANTE VALIDA√á√ÉO');
  console.log('='.repeat(70));
  console.error('\nErro:', error.message);
  console.error('\nStack:', error.stack);
  console.log('\nPoss√≠veis causas:');
  console.log('  - MinIO n√£o est√° rodando');
  console.log('  - Credenciais incorretas');
  console.log('  - s3db.js com problema de build');
  console.log('\nVerifique:');
  console.log('  docker compose ps | grep minio');
  console.log('='.repeat(70));
  process.exit(1);
} finally {
  await database.disconnect();
}
