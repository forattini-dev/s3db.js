import { describe, expect, test } from '@jest/globals';

import ConnectionString from '../src/connection-string.class.js';

describe('ConnectionString Class - Complete Journey', () => {
  test('ConnectionString Journey: Parse → Validate → Build → Transform', () => {
    const s3ConnectionString = 's3://accessKey:secretKey@bucket-name/prefix/path';
    const s3Conn = new ConnectionString(s3ConnectionString);

    expect(s3Conn.bucket).toBe('bucket-name');
    expect(s3Conn.accessKeyId).toBe('accessKey');
    expect(s3Conn.secretAccessKey).toBe('secretKey');
    expect(s3Conn.keyPrefix).toBe('prefix/path');
    expect(s3Conn.endpoint).toBe('https://s3.us-east-1.amazonaws.com');

    // 2. Test MinIO connection string
    const minioConnectionString = 'http://minio-user:minio-password@localhost:9000/minio-bucket/test-prefix?region=us-east-1';
    const minioConn = new ConnectionString(minioConnectionString);

    expect(minioConn.protocol).toBe('http');
    expect(minioConn.hostname).toBe('localhost');
    expect(minioConn.port).toBe(9000);
    expect(minioConn.username).toBe('minio-user');
    expect(minioConn.password).toBe('minio-password');
    expect(minioConn.bucket).toBe('minio-bucket');
    expect(minioConn.keyPrefix).toBe('test-prefix');
    expect(minioConn.region).toBe('us-east-1');

    // 3. Test connection string without credentials
    const noAuthConnectionString = 'https://s3.amazonaws.com/public-bucket';
    const noAuthConn = new ConnectionString(noAuthConnectionString);

    expect(noAuthConn.protocol).toBe('https');
    expect(noAuthConn.hostname).toBe('s3.amazonaws.com');
    expect(noAuthConn.username).toBeUndefined();
    expect(noAuthConn.password).toBeUndefined();
    expect(noAuthConn.bucket).toBe('public-bucket');
    expect(noAuthConn.keyPrefix).toBeUndefined();

    // 4. Test connection string with query parameters
    const queryConnectionString = 'https://user:pass@s3.amazonaws.com/bucket/prefix?region=eu-west-1&endpoint=https://custom-endpoint.com&forcePathStyle=true';
    const queryConn = new ConnectionString(queryConnectionString);

    expect(queryConn.region).toBe('eu-west-1');
    expect(queryConn.endpoint).toBe('https://custom-endpoint.com');
    expect(queryConn.forcePathStyle).toBe('true');

    // 5. Test connection string validation
    expect(s3Conn.isValid()).toBe(true);
    expect(minioConn.isValid()).toBe(true);
    expect(noAuthConn.isValid()).toBe(true);

    // Test invalid connection strings
    const invalidConn1 = new ConnectionString('invalid-url');
    expect(invalidConn1.isValid()).toBe(false);

    const invalidConn2 = new ConnectionString('https://s3.amazonaws.com'); // No bucket
    expect(invalidConn2.isValid()).toBe(false);

    // 6. Test connection string building
    const builtS3 = s3Conn.toString();
    expect(builtS3).toContain('https://');
    expect(builtS3).toContain('accessKey:secretKey');
    expect(builtS3).toContain('s3.amazonaws.com');
    expect(builtS3).toContain('bucket-name');

    // 7. Test connection string transformation
    const transformedConn = s3Conn.clone();
    transformedConn.region = 'us-west-2';
    transformedConn.keyPrefix = 'new-prefix';

    expect(transformedConn.region).toBe('us-west-2');
    expect(transformedConn.keyPrefix).toBe('new-prefix');
    expect(s3Conn.region).toBe('us-east-1'); // Original unchanged
    expect(s3Conn.keyPrefix).toBe('prefix'); // Original unchanged

    // 8. Test AWS SDK configuration
    const awsConfig = s3Conn.toAWSConfig();
    expect(awsConfig.region).toBe('us-east-1');
    expect(awsConfig.credentials).toBeDefined();
    expect(awsConfig.credentials.accessKeyId).toBe('accessKey');
    expect(awsConfig.credentials.secretAccessKey).toBe('secretKey');

    // 9. Test MinIO configuration
    const minioConfig = minioConn.toAWSConfig();
    expect(minioConfig.endpoint).toBe('http://localhost:9000');
    expect(minioConfig.forcePathStyle).toBe(true);
    expect(minioConfig.region).toBe('us-east-1');
    expect(minioConfig.credentials).toBeDefined();
  });

  test('ConnectionString Edge Cases Journey', () => {
    // Test with special characters in credentials
    const specialCharsConnectionString = 'https://user%40domain:pass%23word@s3.amazonaws.com/bucket%20name/prefix/path';
    const specialConn = new ConnectionString(specialCharsConnectionString);

    expect(specialConn.accessKeyId).toBe('user%40domain');
    expect(specialConn.secretAccessKey).toBe('pass%23word');
    expect(specialConn.bucket).toBe('bucket%20name');
    expect(specialConn.keyPrefix).toBe('prefix/path');

    // 2. Test connection string with port
    const portConnectionString = 'https://user:pass@s3.amazonaws.com:443/bucket';
    const portConn = new ConnectionString(portConnectionString);

    expect(portConn.port).toBe(443);
    expect(portConn.hostname).toBe('s3.amazonaws.com');

    // 3. Test connection string with multiple slashes in path
    const multiSlashConnectionString = 'https://user:pass@s3.amazonaws.com/bucket///prefix///';
    const multiSlashConn = new ConnectionString(multiSlashConnectionString);

    expect(multiSlashConn.bucket).toBe('bucket');
    expect(multiSlashConn.keyPrefix).toBe('prefix');

    // 4. Test connection string with empty prefix
    const emptyPrefixConnectionString = 'https://user:pass@s3.amazonaws.com/bucket/';
    const emptyPrefixConn = new ConnectionString(emptyPrefixConnectionString);

    expect(emptyPrefixConn.bucket).toBe('bucket');
    expect(emptyPrefixConn.keyPrefix).toBeUndefined();

    // 5. Test connection string with only bucket
    const bucketOnlyConnectionString = 'https://user:pass@s3.amazonaws.com/bucket';
    const bucketOnlyConn = new ConnectionString(bucketOnlyConnectionString);

    expect(bucketOnlyConn.bucket).toBe('bucket');
    expect(bucketOnlyConn.keyPrefix).toBeUndefined();
  });

  test('ConnectionString Error Handling Journey', () => {
    const invalidConnectionStrings = [
      'invalid-string',
      'ftp://example.com',
      'not-a-url',
      ''
    ];

    invalidConnectionStrings.forEach(connectionString => {
      expect(() => new ConnectionString(connectionString)).toThrow(/Invalid connection string/);
    });
  });

  test('ConnectionString Configuration Journey', () => {
    // Test default configuration
    const defaultConn = new ConnectionString('https://user:pass@s3.amazonaws.com/bucket');
    
    expect(defaultConn.accessKeyId).toBe('user');
    expect(defaultConn.secretAccessKey).toBe('pass');
    expect(defaultConn.bucket).toBe('bucket');
  });

  test('ConnectionString Comparison Journey', () => {
    const conn1 = new ConnectionString('s3://key1:secret1@bucket1/prefix1');
    const conn2 = new ConnectionString('s3://key1:secret1@bucket1/prefix1');
    const conn3 = new ConnectionString('s3://key2:secret2@bucket2/prefix2');

    expect(conn1.bucket).toBe(conn2.bucket);
    expect(conn1.bucket).not.toBe(conn3.bucket);
  });
});
