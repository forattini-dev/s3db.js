import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';
import { createDatabaseForTest } from '../config.js';

describe('Special Characters Encoding Tests', () => {
  let db;
  let resource;

  beforeAll(async () => {
    db = await createDatabaseForTest('special-chars');
    resource = await db.createResource({
      name: 'test_special_chars',
      attributes: {
        id: 'string|required',
        name: 'string|required',
        description: 'string|optional',
        location: 'string|optional',
        notes: 'string|optional'
      },
      behavior: 'user-managed'
    });
  });

  afterAll(async () => {
    if (db?.teardown) await db.teardown();
  });

  test('should preserve Portuguese characters', async () => {
    const testData = {
      id: 'test-pt',
      name: 'Jo√£o da Silva',
      description: 'Descri√ß√£o com acentos: a√ß√£o, cora√ß√£o, n√£o',
      location: 'S√£o Paulo, Brasil',
      notes: 'Notas com √ß, √£, √µ, √°, √©, √≠, √≥, √∫'
    };

    const inserted = await resource.insert(testData);
    expect(inserted.name).toBe(testData.name);
    expect(inserted.description).toBe(testData.description);

    const retrieved = await resource.get('test-pt');
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
    expect(retrieved.notes).toBe(testData.notes);
  });

  test('should preserve Spanish characters', async () => {
    const testData = {
      id: 'test-es',
      name: 'Jos√© Mar√≠a Rodr√≠guez',
      description: 'Descripci√≥n en espa√±ol con √±, √°, √©, √≠, √≥, √∫',
      location: 'Barcelona, Espa√±a'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-es');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should preserve French characters', async () => {
    const testData = {
      id: 'test-fr',
      name: 'Fran√ßois M√ºller',
      description: 'Caract√®res fran√ßais: √©, √®, √™, √´, √†, √π, √ß, ≈ì',
      location: 'Paris, France'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-fr');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should preserve German characters', async () => {
    const testData = {
      id: 'test-de',
      name: 'J√ºrgen M√ºller',
      description: 'Deutsche Zeichen: √§, √∂, √º, √ü',
      location: 'M√ºnchen, Deutschland'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-de');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should preserve Asian characters', async () => {
    const testData = {
      id: 'test-asian',
      name: 'Áî∞‰∏≠Â§™ÈÉé',
      description: '‰∏≠ÂõΩËØ≠Ë®ÄÊµãËØï: ‰Ω†Â•Ω‰∏ñÁïå',
      location: 'Tokyo, Êó•Êú¨'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-asian');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should preserve emojis and symbols', async () => {
    const testData = {
      id: 'test-emoji',
      name: 'Test üöÄ User',
      description: 'Emojis: üòÄ üéâ üíª üåü ‚ù§Ô∏è and symbols: ¬© ¬Æ ‚Ñ¢ ‚Ç¨ ¬£ ¬•',
      location: 'Global üåç'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-emoji');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should preserve mixed Unicode characters', async () => {
    const testData = {
      id: 'test-mixed',
      name: 'Vov√¥s Bressan',
      description: 'Mixed: caf√© üçµ, na√Øve r√©sum√©, √òrsted company',
      location: 'Z√ºrich, Schweiz üá®üá≠'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-mixed');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should handle ASCII characters normally', async () => {
    const testData = {
      id: 'test-ascii',
      name: 'Regular ASCII Name',
      description: 'Regular description with no special characters',
      location: 'New York, USA'
    };

    const inserted = await resource.insert(testData);
    const retrieved = await resource.get('test-ascii');
    
    expect(retrieved.name).toBe(testData.name);
    expect(retrieved.description).toBe(testData.description);
    expect(retrieved.location).toBe(testData.location);
  });

  test('should preserve special characters in updates', async () => {
    const initialData = {
      id: 'test-update',
      name: 'Initial Name',
      description: 'Initial description'
    };

    await resource.insert(initialData);

    const updateData = {
      name: 'Jos√© Mar√≠a Fern√°ndez',
      description: 'Atualiza√ß√£o com a√ßent√¥s e √±'
    };

    const updated = await resource.update('test-update', updateData);
    expect(updated.name).toBe(updateData.name);
    expect(updated.description).toBe(updateData.description);

    const retrieved = await resource.get('test-update');
    expect(retrieved.name).toBe(updateData.name);
    expect(retrieved.description).toBe(updateData.description);
  });
}); 