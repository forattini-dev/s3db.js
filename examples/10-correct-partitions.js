import S3db from '../src/index.js';

// Exemplo CORRETO de parti√ß√µes nomeadas
async function correctPartitionsExample() {
  console.log('üéØ CORRECT Partitions Example\n');

  // 1. Setup database
  const db = new S3db({
    connectionString: 'http://localhost:9000/correct-partitions?accessKeyId=s3db&secretAccessKey=thisissecret&forcePathStyle=true',
    verbose: true
  });

  await db.connect();

  // 2. Criar resource com PARTI√á√ïES NOMEADAS
  const users = await db.createResource({
    name: 'users',
    attributes: {
      name: 'string',
      email: 'string',
      region: 'string',
      department: 'string',
      status: 'string',
    },
    options: {
      timestamps: true,  // Automaticamente adiciona byCreatedDate e byUpdatedDate
      partitions: {
        // Nome da parti√ß√£o: { field: 'campo', rule: 'regra' }
        byRegion: {
          field: 'region',
          rule: 'string|maxlength:2'  // US-WEST ‚Üí US
        },
        byDepartment: {
          field: 'department', 
          rule: 'string'              // engineering, sales, marketing
        },
        byStatus: {
          field: 'status',
          rule: 'string'              // active, inactive, pending
        }
        // byCreatedDate e byUpdatedDate s√£o adicionadas automaticamente pelo timestamps: true
      }
    }
  });

  console.log('‚úÖ Resource criado com parti√ß√µes nomeadas:');
  console.log('Parti√ß√µes:', Object.keys(users.options.partitions));

  // 3. Inserir dados (objetos principais + refer√™ncias nas parti√ß√µes)
  const userData = [
    { name: 'Jo√£o Silva', email: 'joao@empresa.com', region: 'US-WEST', department: 'engineering', status: 'active' },
    { name: 'Maria Santos', email: 'maria@empresa.com', region: 'EU-NORTH', department: 'sales', status: 'active' },
    { name: 'Carlos Lima', email: 'carlos@empresa.com', region: 'AS-EAST', department: 'marketing', status: 'pending' }
  ];

  console.log('\nüìù Inserindo usu√°rios...');
  for (const user of userData) {
    const inserted = await users.insert(user);
    console.log(`   ‚Üí ${user.name} inserido com ID: ${inserted.id}`);
    console.log(`     Objeto principal: /resource=users/v=1/id=${inserted.id}`);
    console.log(`     Refer√™ncia byRegion: /resource=users/partitions/byRegion/region=US/id=${inserted.id}`);
    console.log(`     Refer√™ncia byDepartment: /resource=users/partitions/byDepartment/department=${user.department}/id=${inserted.id}`);
    console.log(`     Refer√™ncia byStatus: /resource=users/partitions/byStatus/status=${user.status}/id=${inserted.id}`);
  }

  // 4. LISTAGEM SIMPLES (sem parti√ß√µes)
  console.log('\nüìã LISTAGEM SIMPLES (todos os usu√°rios)');
  console.log('=====================================');
  
  const allUsers = await users.listByPartition();
  console.log(`Total de usu√°rios: ${allUsers.length}`);
  allUsers.forEach(user => console.log(`  - ${user.name} (${user.region}/${user.department}/${user.status})`));

  // 5. LISTAGEM POR PARTI√á√ÉO NOMEADA
  console.log('\nüóÇÔ∏è LISTAGEM POR PARTI√á√ÉO');
  console.log('=====================================');

  // Listar usu√°rios ativos (usando parti√ß√£o byStatus)
  console.log('\nüë• Usu√°rios ATIVOS (parti√ß√£o: byStatus):');
  const activeUsers = await users.listByPartition('byStatus', 'active');
  activeUsers.forEach(user => console.log(`  - ${user.name} (${user.region})`));

  // Listar usu√°rios da regi√£o US (usando parti√ß√£o byRegion)  
  console.log('\nüá∫üá∏ Usu√°rios da regi√£o US (parti√ß√£o: byRegion):');
  const usUsers = await users.listByPartition('byRegion', 'US');
  usUsers.forEach(user => console.log(`  - ${user.name} (${user.department})`));

  // Listar usu√°rios de engenharia (usando parti√ß√£o byDepartment)
  console.log('\nüíª Usu√°rios de Engineering (parti√ß√£o: byDepartment):');
  const engineeringUsers = await users.listByPartition('byDepartment', 'engineering');  
  engineeringUsers.forEach(user => console.log(`  - ${user.name} (${user.region})`));

  // 6. CONTAGEM POR PARTI√á√ÉO
  console.log('\nüìä CONTAGEM POR PARTI√á√ÉO');
  console.log('=====================================');

  const totalUsers = await users.count();
  console.log(`Total geral: ${totalUsers}`);

  const activeCount = await users.count('byStatus', 'active');
  console.log(`Usu√°rios ativos: ${activeCount}`);

  const usCount = await users.count('byRegion', 'US');
  console.log(`Usu√°rios US: ${usCount}`);

  const engineeringCount = await users.count('byDepartment', 'engineering');
  console.log(`Usu√°rios Engineering: ${engineeringCount}`);

  // 7. PAGINA√á√ÉO COM PARTI√á√ïES
  console.log('\nüìÑ PAGINA√á√ÉO COM PARTI√á√ïES');
  console.log('=====================================');

  const page1 = await users.page(0, 2, 'byStatus', 'active');
  console.log(`P√°gina 1 (${page1.items.length} de ${page1.totalItems}):`, 
    page1.items.map(u => u.name));

  // 8. DEMONSTRA√á√ÉO DA ESTRUTURA CORRETA
  console.log('\nüèóÔ∏è ESTRUTURA DE ARQUIVOS NO S3');
  console.log('=====================================');
  console.log('‚úÖ OBJETOS PRINCIPAIS (dados completos):');
  console.log('  /resource=users/v=1/id=abc123  (Jo√£o Silva)');
  console.log('  /resource=users/v=1/id=def456  (Maria Santos)');
  console.log('  /resource=users/v=1/id=ghi789  (Carlos Lima)');
  
  console.log('\n‚úÖ REFER√äNCIAS DE PARTI√á√ÉO (ponteiros):');
  console.log('  /resource=users/partitions/byRegion/region=US/id=abc123  ‚Üí aponta para objeto principal');
  console.log('  /resource=users/partitions/byRegion/region=EU/id=def456  ‚Üí aponta para objeto principal');
  console.log('  /resource=users/partitions/byDepartment/department=engineering/id=abc123  ‚Üí aponta para objeto principal');
  console.log('  /resource=users/partitions/byStatus/status=active/id=abc123  ‚Üí aponta para objeto principal');

  console.log('\nüéâ Exemplo de parti√ß√µes CORRETAS conclu√≠do!');
  console.log('\nüí° PONTOS IMPORTANTES:');
  console.log('- Objetos SEMPRE salvos no path versionado principal');
  console.log('- Parti√ß√µes s√£o REFER√äNCIAS que apontam para o objeto principal');
  console.log('- Parti√ß√µes t√™m NOMES para facilitar uso na listagem');
  console.log('- Timestamps autom√°ticos criam parti√ß√µes byCreatedDate e byUpdatedDate');
  console.log('- Listagem eficiente usando prefix S3 nas parti√ß√µes');
}

// Executar exemplo
correctPartitionsExample().catch(console.error);