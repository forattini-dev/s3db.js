/**
 * VulnerabilityStage
 *
 * Vulnerability scanning:
 * - nikto (web server scanner)
 * - wpscan (WordPress scanner)
 * - droopescan (Drupal/Joomla scanner)
 */

export class VulnerabilityStage {
  constructor(plugin) {
    this.plugin = plugin;
    this.commandRunner = plugin.commandRunner;
    this.config = plugin.config;
  }

  async execute(target, featureConfig = {}) {
    const tools = {};

    const executeScanner = async (name, command, args) => {
      const run = await this.commandRunner.run(command, args, {
        timeout: featureConfig.timeout ?? 60000,
        maxBuffer: 8 * 1024 * 1024
      });
      if (!run.ok) {
        tools[name] = {
          status: run.error?.code === 'ENOENT' ? 'unavailable' : 'error',
          message: run.error?.message || `${command} failed`,
          stderr: run.stderr
        };
        return;
      }
      tools[name] = {
        status: 'ok'
      };
      if (this.config.storage.persistRawOutput) {
        tools[name].raw = this._truncateOutput(run.stdout);
      }
    };

    if (featureConfig.nikto) {
      await executeScanner('nikto', 'nikto', ['-h', this._buildUrl(target), '-ask', 'no']);
    }

    if (featureConfig.wpscan) {
      await executeScanner('wpscan', 'wpscan', ['--url', this._buildUrl(target), '--random-user-agent']);
    }

    if (featureConfig.droopescan) {
      await executeScanner('droopescan', 'droopescan', ['scan', 'drupal', '-u', this._buildUrl(target)]);
    }

    if (Object.keys(tools).length === 0) {
      return { status: 'skipped' };
    }

    return {
      _individual: tools,
      _aggregated: {
        status: Object.values(tools).some((tool) => tool.status === 'ok') ? 'ok' : 'empty',
        tools
      },
      status: Object.values(tools).some((tool) => tool.status === 'ok') ? 'ok' : 'empty',
      tools
    };
  }

  _buildUrl(target) {
    const protocol = target.protocol || 'https';
    const port = target.port && target.port !== (protocol === 'http' ? 80 : 443) ? `:${target.port}` : '';
    return `${protocol}://${target.host}${port}${target.path || ''}`;
  }

  _truncateOutput(text, maxLength = 10000) {
    if (!text || text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '\n... (truncated)';
  }
}
